#MPCC_solv_20N_no_warm_no_hard_invitedguest : A fast customized optimization solver.
#
#Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.
#
#
#This software is intended for simulation and testing purposes only. 
#Use of this software for any commercial purpose is prohibited.
#
#This program is distributed in the hope that it will be useful.
#EMBOTECH makes NO WARRANTIES with respect to the use of the software 
#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
#PARTICULAR PURPOSE. 
#
#EMBOTECH shall not have any liability for any damage arising from the use
#of the software.
#
#This Agreement shall exclusively be governed by and interpreted in 
#accordance with the laws of Switzerland, excluding its principles
#of conflict of laws. The Courts of Zurich-City shall have exclusive 
#jurisdiction in case of any dispute.
#
#def __init__():
'''
a Python wrapper for a fast solver generated by FORCESPRO v5.1.0

   OUTPUT = MPCC_solv_20N_no_warm_no_hard_invitedguest_py.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['c_1'] - column vector of length 8
       PARAMS['c_2'] - column vector of length 10
       PARAMS['c_3'] - column vector of length 10
       PARAMS['c_4'] - column vector of length 10
       PARAMS['c_5'] - column vector of length 10
       PARAMS['c_6'] - column vector of length 10
       PARAMS['c_7'] - column vector of length 10
       PARAMS['c_8'] - column vector of length 10
       PARAMS['c_9'] - column vector of length 10
       PARAMS['c_10'] - column vector of length 10
       PARAMS['c_11'] - column vector of length 10
       PARAMS['c_12'] - column vector of length 10
       PARAMS['c_13'] - column vector of length 10
       PARAMS['c_14'] - column vector of length 10
       PARAMS['c_15'] - column vector of length 10
       PARAMS['c_16'] - column vector of length 10
       PARAMS['c_17'] - column vector of length 10
       PARAMS['c_18'] - column vector of length 10
       PARAMS['c_19'] - column vector of length 10
       PARAMS['c_20'] - column vector of length 10
       PARAMS['c_21'] - column vector of length 10
       PARAMS['H_1'] - matrix of size [14 x 14]
       PARAMS['H_2'] - matrix of size [14 x 14]
       PARAMS['H_3'] - matrix of size [14 x 14]
       PARAMS['H_4'] - matrix of size [14 x 14]
       PARAMS['H_5'] - matrix of size [14 x 14]
       PARAMS['H_6'] - matrix of size [14 x 14]
       PARAMS['H_7'] - matrix of size [14 x 14]
       PARAMS['H_8'] - matrix of size [14 x 14]
       PARAMS['H_9'] - matrix of size [14 x 14]
       PARAMS['H_10'] - matrix of size [14 x 14]
       PARAMS['H_11'] - matrix of size [14 x 14]
       PARAMS['H_12'] - matrix of size [14 x 14]
       PARAMS['H_13'] - matrix of size [14 x 14]
       PARAMS['H_14'] - matrix of size [14 x 14]
       PARAMS['H_15'] - matrix of size [14 x 14]
       PARAMS['H_16'] - matrix of size [14 x 14]
       PARAMS['H_17'] - matrix of size [14 x 14]
       PARAMS['H_18'] - matrix of size [14 x 14]
       PARAMS['H_19'] - matrix of size [14 x 14]
       PARAMS['H_20'] - matrix of size [14 x 14]
       PARAMS['H_21'] - matrix of size [14 x 14]
       PARAMS['f_1'] - column vector of length 14
       PARAMS['f_2'] - column vector of length 14
       PARAMS['f_3'] - column vector of length 14
       PARAMS['f_4'] - column vector of length 14
       PARAMS['f_5'] - column vector of length 14
       PARAMS['f_6'] - column vector of length 14
       PARAMS['f_7'] - column vector of length 14
       PARAMS['f_8'] - column vector of length 14
       PARAMS['f_9'] - column vector of length 14
       PARAMS['f_10'] - column vector of length 14
       PARAMS['f_11'] - column vector of length 14
       PARAMS['f_12'] - column vector of length 14
       PARAMS['f_13'] - column vector of length 14
       PARAMS['f_14'] - column vector of length 14
       PARAMS['f_15'] - column vector of length 14
       PARAMS['f_16'] - column vector of length 14
       PARAMS['f_17'] - column vector of length 14
       PARAMS['f_18'] - column vector of length 14
       PARAMS['f_19'] - column vector of length 14
       PARAMS['f_20'] - column vector of length 14
       PARAMS['f_21'] - column vector of length 14
       PARAMS['C_1'] - matrix of size [10 x 14]
       PARAMS['C_2'] - matrix of size [10 x 14]
       PARAMS['C_3'] - matrix of size [10 x 14]
       PARAMS['C_4'] - matrix of size [10 x 14]
       PARAMS['C_5'] - matrix of size [10 x 14]
       PARAMS['C_6'] - matrix of size [10 x 14]
       PARAMS['C_7'] - matrix of size [10 x 14]
       PARAMS['C_8'] - matrix of size [10 x 14]
       PARAMS['C_9'] - matrix of size [10 x 14]
       PARAMS['C_10'] - matrix of size [10 x 14]
       PARAMS['C_11'] - matrix of size [10 x 14]
       PARAMS['C_12'] - matrix of size [10 x 14]
       PARAMS['C_13'] - matrix of size [10 x 14]
       PARAMS['C_14'] - matrix of size [10 x 14]
       PARAMS['C_15'] - matrix of size [10 x 14]
       PARAMS['C_16'] - matrix of size [10 x 14]
       PARAMS['C_17'] - matrix of size [10 x 14]
       PARAMS['C_18'] - matrix of size [10 x 14]
       PARAMS['C_19'] - matrix of size [10 x 14]
       PARAMS['C_20'] - matrix of size [10 x 14]
       PARAMS['A_2'] - matrix of size [2 x 14]
       PARAMS['A_3'] - matrix of size [2 x 14]
       PARAMS['A_4'] - matrix of size [2 x 14]
       PARAMS['A_5'] - matrix of size [2 x 14]
       PARAMS['A_6'] - matrix of size [2 x 14]
       PARAMS['A_7'] - matrix of size [2 x 14]
       PARAMS['A_8'] - matrix of size [2 x 14]
       PARAMS['A_9'] - matrix of size [2 x 14]
       PARAMS['A_10'] - matrix of size [2 x 14]
       PARAMS['A_11'] - matrix of size [2 x 14]
       PARAMS['A_12'] - matrix of size [2 x 14]
       PARAMS['A_13'] - matrix of size [2 x 14]
       PARAMS['A_14'] - matrix of size [2 x 14]
       PARAMS['A_15'] - matrix of size [2 x 14]
       PARAMS['A_16'] - matrix of size [2 x 14]
       PARAMS['A_17'] - matrix of size [2 x 14]
       PARAMS['A_18'] - matrix of size [2 x 14]
       PARAMS['A_19'] - matrix of size [2 x 14]
       PARAMS['A_20'] - matrix of size [2 x 14]
       PARAMS['A_21'] - matrix of size [2 x 14]
       PARAMS['b_2'] - column vector of length 2
       PARAMS['b_3'] - column vector of length 2
       PARAMS['b_4'] - column vector of length 2
       PARAMS['b_5'] - column vector of length 2
       PARAMS['b_6'] - column vector of length 2
       PARAMS['b_7'] - column vector of length 2
       PARAMS['b_8'] - column vector of length 2
       PARAMS['b_9'] - column vector of length 2
       PARAMS['b_10'] - column vector of length 2
       PARAMS['b_11'] - column vector of length 2
       PARAMS['b_12'] - column vector of length 2
       PARAMS['b_13'] - column vector of length 2
       PARAMS['b_14'] - column vector of length 2
       PARAMS['b_15'] - column vector of length 2
       PARAMS['b_16'] - column vector of length 2
       PARAMS['b_17'] - column vector of length 2
       PARAMS['b_18'] - column vector of length 2
       PARAMS['b_19'] - column vector of length 2
       PARAMS['b_20'] - column vector of length 2
       PARAMS['b_21'] - column vector of length 2

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['X'] - column vector of size 252

   [OUTPUT, EXITFLAG] = MPCC_solv_20N_no_warm_no_hard_invitedguest_py.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = MPCC_solv_20N_no_warm_no_hard_invitedguest_py.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

'''

import ctypes
import os
import numpy as np
import numpy.ctypeslib as npct
import sys

#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'MPCC_solv_20N_no_warm_no_hard_invitedguest/lib/MPCC_solv_20N_no_warm_no_hard_invitedguest.so')) 
try:
    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'../lib/MPCC_solv_20N_no_warm_no_hard_invitedguest.so'))
    csolver = getattr(_lib,'MPCC_solv_20N_no_warm_no_hard_invitedguest_solve')
except:
    _lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'../lib/libMPCC_solv_20N_no_warm_no_hard_invitedguest.so'))
    csolver = getattr(_lib,'MPCC_solv_20N_no_warm_no_hard_invitedguest_solve')

class MPCC_solv_20N_no_warm_no_hard_invitedguest_params_ctypes(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('c_1', ctypes.c_double * 8),
('c_2', ctypes.c_double * 10),
('c_3', ctypes.c_double * 10),
('c_4', ctypes.c_double * 10),
('c_5', ctypes.c_double * 10),
('c_6', ctypes.c_double * 10),
('c_7', ctypes.c_double * 10),
('c_8', ctypes.c_double * 10),
('c_9', ctypes.c_double * 10),
('c_10', ctypes.c_double * 10),
('c_11', ctypes.c_double * 10),
('c_12', ctypes.c_double * 10),
('c_13', ctypes.c_double * 10),
('c_14', ctypes.c_double * 10),
('c_15', ctypes.c_double * 10),
('c_16', ctypes.c_double * 10),
('c_17', ctypes.c_double * 10),
('c_18', ctypes.c_double * 10),
('c_19', ctypes.c_double * 10),
('c_20', ctypes.c_double * 10),
('c_21', ctypes.c_double * 10),
('H_1', ctypes.c_double * 196),
('H_2', ctypes.c_double * 196),
('H_3', ctypes.c_double * 196),
('H_4', ctypes.c_double * 196),
('H_5', ctypes.c_double * 196),
('H_6', ctypes.c_double * 196),
('H_7', ctypes.c_double * 196),
('H_8', ctypes.c_double * 196),
('H_9', ctypes.c_double * 196),
('H_10', ctypes.c_double * 196),
('H_11', ctypes.c_double * 196),
('H_12', ctypes.c_double * 196),
('H_13', ctypes.c_double * 196),
('H_14', ctypes.c_double * 196),
('H_15', ctypes.c_double * 196),
('H_16', ctypes.c_double * 196),
('H_17', ctypes.c_double * 196),
('H_18', ctypes.c_double * 196),
('H_19', ctypes.c_double * 196),
('H_20', ctypes.c_double * 196),
('H_21', ctypes.c_double * 196),
('f_1', ctypes.c_double * 14),
('f_2', ctypes.c_double * 14),
('f_3', ctypes.c_double * 14),
('f_4', ctypes.c_double * 14),
('f_5', ctypes.c_double * 14),
('f_6', ctypes.c_double * 14),
('f_7', ctypes.c_double * 14),
('f_8', ctypes.c_double * 14),
('f_9', ctypes.c_double * 14),
('f_10', ctypes.c_double * 14),
('f_11', ctypes.c_double * 14),
('f_12', ctypes.c_double * 14),
('f_13', ctypes.c_double * 14),
('f_14', ctypes.c_double * 14),
('f_15', ctypes.c_double * 14),
('f_16', ctypes.c_double * 14),
('f_17', ctypes.c_double * 14),
('f_18', ctypes.c_double * 14),
('f_19', ctypes.c_double * 14),
('f_20', ctypes.c_double * 14),
('f_21', ctypes.c_double * 14),
('C_1', ctypes.c_double * 140),
('C_2', ctypes.c_double * 140),
('C_3', ctypes.c_double * 140),
('C_4', ctypes.c_double * 140),
('C_5', ctypes.c_double * 140),
('C_6', ctypes.c_double * 140),
('C_7', ctypes.c_double * 140),
('C_8', ctypes.c_double * 140),
('C_9', ctypes.c_double * 140),
('C_10', ctypes.c_double * 140),
('C_11', ctypes.c_double * 140),
('C_12', ctypes.c_double * 140),
('C_13', ctypes.c_double * 140),
('C_14', ctypes.c_double * 140),
('C_15', ctypes.c_double * 140),
('C_16', ctypes.c_double * 140),
('C_17', ctypes.c_double * 140),
('C_18', ctypes.c_double * 140),
('C_19', ctypes.c_double * 140),
('C_20', ctypes.c_double * 140),
('A_2', ctypes.c_double * 28),
('A_3', ctypes.c_double * 28),
('A_4', ctypes.c_double * 28),
('A_5', ctypes.c_double * 28),
('A_6', ctypes.c_double * 28),
('A_7', ctypes.c_double * 28),
('A_8', ctypes.c_double * 28),
('A_9', ctypes.c_double * 28),
('A_10', ctypes.c_double * 28),
('A_11', ctypes.c_double * 28),
('A_12', ctypes.c_double * 28),
('A_13', ctypes.c_double * 28),
('A_14', ctypes.c_double * 28),
('A_15', ctypes.c_double * 28),
('A_16', ctypes.c_double * 28),
('A_17', ctypes.c_double * 28),
('A_18', ctypes.c_double * 28),
('A_19', ctypes.c_double * 28),
('A_20', ctypes.c_double * 28),
('A_21', ctypes.c_double * 28),
('b_2', ctypes.c_double * 2),
('b_3', ctypes.c_double * 2),
('b_4', ctypes.c_double * 2),
('b_5', ctypes.c_double * 2),
('b_6', ctypes.c_double * 2),
('b_7', ctypes.c_double * 2),
('b_8', ctypes.c_double * 2),
('b_9', ctypes.c_double * 2),
('b_10', ctypes.c_double * 2),
('b_11', ctypes.c_double * 2),
('b_12', ctypes.c_double * 2),
('b_13', ctypes.c_double * 2),
('b_14', ctypes.c_double * 2),
('b_15', ctypes.c_double * 2),
('b_16', ctypes.c_double * 2),
('b_17', ctypes.c_double * 2),
('b_18', ctypes.c_double * 2),
('b_19', ctypes.c_double * 2),
('b_20', ctypes.c_double * 2),
('b_21', ctypes.c_double * 2),
]

MPCC_solv_20N_no_warm_no_hard_invitedguest_params = {'c_1' : np.array([]),
'c_2' : np.array([]),
'c_3' : np.array([]),
'c_4' : np.array([]),
'c_5' : np.array([]),
'c_6' : np.array([]),
'c_7' : np.array([]),
'c_8' : np.array([]),
'c_9' : np.array([]),
'c_10' : np.array([]),
'c_11' : np.array([]),
'c_12' : np.array([]),
'c_13' : np.array([]),
'c_14' : np.array([]),
'c_15' : np.array([]),
'c_16' : np.array([]),
'c_17' : np.array([]),
'c_18' : np.array([]),
'c_19' : np.array([]),
'c_20' : np.array([]),
'c_21' : np.array([]),
'H_1' : np.array([]),
'H_2' : np.array([]),
'H_3' : np.array([]),
'H_4' : np.array([]),
'H_5' : np.array([]),
'H_6' : np.array([]),
'H_7' : np.array([]),
'H_8' : np.array([]),
'H_9' : np.array([]),
'H_10' : np.array([]),
'H_11' : np.array([]),
'H_12' : np.array([]),
'H_13' : np.array([]),
'H_14' : np.array([]),
'H_15' : np.array([]),
'H_16' : np.array([]),
'H_17' : np.array([]),
'H_18' : np.array([]),
'H_19' : np.array([]),
'H_20' : np.array([]),
'H_21' : np.array([]),
'f_1' : np.array([]),
'f_2' : np.array([]),
'f_3' : np.array([]),
'f_4' : np.array([]),
'f_5' : np.array([]),
'f_6' : np.array([]),
'f_7' : np.array([]),
'f_8' : np.array([]),
'f_9' : np.array([]),
'f_10' : np.array([]),
'f_11' : np.array([]),
'f_12' : np.array([]),
'f_13' : np.array([]),
'f_14' : np.array([]),
'f_15' : np.array([]),
'f_16' : np.array([]),
'f_17' : np.array([]),
'f_18' : np.array([]),
'f_19' : np.array([]),
'f_20' : np.array([]),
'f_21' : np.array([]),
'C_1' : np.array([]),
'C_2' : np.array([]),
'C_3' : np.array([]),
'C_4' : np.array([]),
'C_5' : np.array([]),
'C_6' : np.array([]),
'C_7' : np.array([]),
'C_8' : np.array([]),
'C_9' : np.array([]),
'C_10' : np.array([]),
'C_11' : np.array([]),
'C_12' : np.array([]),
'C_13' : np.array([]),
'C_14' : np.array([]),
'C_15' : np.array([]),
'C_16' : np.array([]),
'C_17' : np.array([]),
'C_18' : np.array([]),
'C_19' : np.array([]),
'C_20' : np.array([]),
'A_2' : np.array([]),
'A_3' : np.array([]),
'A_4' : np.array([]),
'A_5' : np.array([]),
'A_6' : np.array([]),
'A_7' : np.array([]),
'A_8' : np.array([]),
'A_9' : np.array([]),
'A_10' : np.array([]),
'A_11' : np.array([]),
'A_12' : np.array([]),
'A_13' : np.array([]),
'A_14' : np.array([]),
'A_15' : np.array([]),
'A_16' : np.array([]),
'A_17' : np.array([]),
'A_18' : np.array([]),
'A_19' : np.array([]),
'A_20' : np.array([]),
'A_21' : np.array([]),
'b_2' : np.array([]),
'b_3' : np.array([]),
'b_4' : np.array([]),
'b_5' : np.array([]),
'b_6' : np.array([]),
'b_7' : np.array([]),
'b_8' : np.array([]),
'b_9' : np.array([]),
'b_10' : np.array([]),
'b_11' : np.array([]),
'b_12' : np.array([]),
'b_13' : np.array([]),
'b_14' : np.array([]),
'b_15' : np.array([]),
'b_16' : np.array([]),
'b_17' : np.array([]),
'b_18' : np.array([]),
'b_19' : np.array([]),
'b_20' : np.array([]),
'b_21' : np.array([]),
}
params = {'c_1' : np.array([]),
'c_2' : np.array([]),
'c_3' : np.array([]),
'c_4' : np.array([]),
'c_5' : np.array([]),
'c_6' : np.array([]),
'c_7' : np.array([]),
'c_8' : np.array([]),
'c_9' : np.array([]),
'c_10' : np.array([]),
'c_11' : np.array([]),
'c_12' : np.array([]),
'c_13' : np.array([]),
'c_14' : np.array([]),
'c_15' : np.array([]),
'c_16' : np.array([]),
'c_17' : np.array([]),
'c_18' : np.array([]),
'c_19' : np.array([]),
'c_20' : np.array([]),
'c_21' : np.array([]),
'H_1' : np.array([]),
'H_2' : np.array([]),
'H_3' : np.array([]),
'H_4' : np.array([]),
'H_5' : np.array([]),
'H_6' : np.array([]),
'H_7' : np.array([]),
'H_8' : np.array([]),
'H_9' : np.array([]),
'H_10' : np.array([]),
'H_11' : np.array([]),
'H_12' : np.array([]),
'H_13' : np.array([]),
'H_14' : np.array([]),
'H_15' : np.array([]),
'H_16' : np.array([]),
'H_17' : np.array([]),
'H_18' : np.array([]),
'H_19' : np.array([]),
'H_20' : np.array([]),
'H_21' : np.array([]),
'f_1' : np.array([]),
'f_2' : np.array([]),
'f_3' : np.array([]),
'f_4' : np.array([]),
'f_5' : np.array([]),
'f_6' : np.array([]),
'f_7' : np.array([]),
'f_8' : np.array([]),
'f_9' : np.array([]),
'f_10' : np.array([]),
'f_11' : np.array([]),
'f_12' : np.array([]),
'f_13' : np.array([]),
'f_14' : np.array([]),
'f_15' : np.array([]),
'f_16' : np.array([]),
'f_17' : np.array([]),
'f_18' : np.array([]),
'f_19' : np.array([]),
'f_20' : np.array([]),
'f_21' : np.array([]),
'C_1' : np.array([]),
'C_2' : np.array([]),
'C_3' : np.array([]),
'C_4' : np.array([]),
'C_5' : np.array([]),
'C_6' : np.array([]),
'C_7' : np.array([]),
'C_8' : np.array([]),
'C_9' : np.array([]),
'C_10' : np.array([]),
'C_11' : np.array([]),
'C_12' : np.array([]),
'C_13' : np.array([]),
'C_14' : np.array([]),
'C_15' : np.array([]),
'C_16' : np.array([]),
'C_17' : np.array([]),
'C_18' : np.array([]),
'C_19' : np.array([]),
'C_20' : np.array([]),
'A_2' : np.array([]),
'A_3' : np.array([]),
'A_4' : np.array([]),
'A_5' : np.array([]),
'A_6' : np.array([]),
'A_7' : np.array([]),
'A_8' : np.array([]),
'A_9' : np.array([]),
'A_10' : np.array([]),
'A_11' : np.array([]),
'A_12' : np.array([]),
'A_13' : np.array([]),
'A_14' : np.array([]),
'A_15' : np.array([]),
'A_16' : np.array([]),
'A_17' : np.array([]),
'A_18' : np.array([]),
'A_19' : np.array([]),
'A_20' : np.array([]),
'A_21' : np.array([]),
'b_2' : np.array([]),
'b_3' : np.array([]),
'b_4' : np.array([]),
'b_5' : np.array([]),
'b_6' : np.array([]),
'b_7' : np.array([]),
'b_8' : np.array([]),
'b_9' : np.array([]),
'b_10' : np.array([]),
'b_11' : np.array([]),
'b_12' : np.array([]),
'b_13' : np.array([]),
'b_14' : np.array([]),
'b_15' : np.array([]),
'b_16' : np.array([]),
'b_17' : np.array([]),
'b_18' : np.array([]),
'b_19' : np.array([]),
'b_20' : np.array([]),
'b_21' : np.array([]),
}
MPCC_solv_20N_no_warm_no_hard_invitedguest_params_types = {'c_1' : np.float64,
'c_2' : np.float64,
'c_3' : np.float64,
'c_4' : np.float64,
'c_5' : np.float64,
'c_6' : np.float64,
'c_7' : np.float64,
'c_8' : np.float64,
'c_9' : np.float64,
'c_10' : np.float64,
'c_11' : np.float64,
'c_12' : np.float64,
'c_13' : np.float64,
'c_14' : np.float64,
'c_15' : np.float64,
'c_16' : np.float64,
'c_17' : np.float64,
'c_18' : np.float64,
'c_19' : np.float64,
'c_20' : np.float64,
'c_21' : np.float64,
'H_1' : np.float64,
'H_2' : np.float64,
'H_3' : np.float64,
'H_4' : np.float64,
'H_5' : np.float64,
'H_6' : np.float64,
'H_7' : np.float64,
'H_8' : np.float64,
'H_9' : np.float64,
'H_10' : np.float64,
'H_11' : np.float64,
'H_12' : np.float64,
'H_13' : np.float64,
'H_14' : np.float64,
'H_15' : np.float64,
'H_16' : np.float64,
'H_17' : np.float64,
'H_18' : np.float64,
'H_19' : np.float64,
'H_20' : np.float64,
'H_21' : np.float64,
'f_1' : np.float64,
'f_2' : np.float64,
'f_3' : np.float64,
'f_4' : np.float64,
'f_5' : np.float64,
'f_6' : np.float64,
'f_7' : np.float64,
'f_8' : np.float64,
'f_9' : np.float64,
'f_10' : np.float64,
'f_11' : np.float64,
'f_12' : np.float64,
'f_13' : np.float64,
'f_14' : np.float64,
'f_15' : np.float64,
'f_16' : np.float64,
'f_17' : np.float64,
'f_18' : np.float64,
'f_19' : np.float64,
'f_20' : np.float64,
'f_21' : np.float64,
'C_1' : np.float64,
'C_2' : np.float64,
'C_3' : np.float64,
'C_4' : np.float64,
'C_5' : np.float64,
'C_6' : np.float64,
'C_7' : np.float64,
'C_8' : np.float64,
'C_9' : np.float64,
'C_10' : np.float64,
'C_11' : np.float64,
'C_12' : np.float64,
'C_13' : np.float64,
'C_14' : np.float64,
'C_15' : np.float64,
'C_16' : np.float64,
'C_17' : np.float64,
'C_18' : np.float64,
'C_19' : np.float64,
'C_20' : np.float64,
'A_2' : np.float64,
'A_3' : np.float64,
'A_4' : np.float64,
'A_5' : np.float64,
'A_6' : np.float64,
'A_7' : np.float64,
'A_8' : np.float64,
'A_9' : np.float64,
'A_10' : np.float64,
'A_11' : np.float64,
'A_12' : np.float64,
'A_13' : np.float64,
'A_14' : np.float64,
'A_15' : np.float64,
'A_16' : np.float64,
'A_17' : np.float64,
'A_18' : np.float64,
'A_19' : np.float64,
'A_20' : np.float64,
'A_21' : np.float64,
'b_2' : np.float64,
'b_3' : np.float64,
'b_4' : np.float64,
'b_5' : np.float64,
'b_6' : np.float64,
'b_7' : np.float64,
'b_8' : np.float64,
'b_9' : np.float64,
'b_10' : np.float64,
'b_11' : np.float64,
'b_12' : np.float64,
'b_13' : np.float64,
'b_14' : np.float64,
'b_15' : np.float64,
'b_16' : np.float64,
'b_17' : np.float64,
'b_18' : np.float64,
'b_19' : np.float64,
'b_20' : np.float64,
'b_21' : np.float64,
}

class MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs_ctypes(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('X', ctypes.c_double * 252),
]

MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs = {'X' : np.array([]),
}


class MPCC_solv_20N_no_warm_no_hard_invitedguest_info(ctypes.Structure):
#    @classmethod
#    def from_param(self):
#        return self
    _fields_ = [('it', ctypes.c_int32),
('it2opt', ctypes.c_int32),
('res_eq', ctypes.c_double),
('res_ineq', ctypes.c_double),
('pobj', ctypes.c_double),
('dobj', ctypes.c_double),
('dgap', ctypes.c_double),
('rdgap', ctypes.c_double),
('gradient_lag_norm', ctypes.c_double),
('mu', ctypes.c_double),
('mu_aff', ctypes.c_double),
('sigma', ctypes.c_double),
('lsit_aff', ctypes.c_int32),
('lsit_cc', ctypes.c_int32),
('step_aff', ctypes.c_double),
('step_cc', ctypes.c_double),
('solvetime', ctypes.c_double)
]

class FILE(ctypes.Structure):
        pass
if sys.version_info.major == 2:
    PyFile_AsFile = ctypes.pythonapi.PyFile_AsFile # problem here with python 3 http://stackoverflow.com/questions/16130268/python-3-replacement-for-pyfile-asfile
    PyFile_AsFile.argtypes = [ctypes.py_object]
    PyFile_AsFile.restype = ctypes.POINTER(FILE)

# determine data types for solver function prototype 
csolver.argtypes = ( ctypes.POINTER(MPCC_solv_20N_no_warm_no_hard_invitedguest_params_ctypes), ctypes.POINTER(MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs_ctypes), ctypes.POINTER(MPCC_solv_20N_no_warm_no_hard_invitedguest_info), ctypes.POINTER(FILE))
csolver.restype = ctypes.c_int

def MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(params_arg):
    '''
a Python wrapper for a fast solver generated by FORCESPRO v5.1.0

   OUTPUT = MPCC_solv_20N_no_warm_no_hard_invitedguest_py.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['c_1'] - column vector of length 8
       PARAMS['c_2'] - column vector of length 10
       PARAMS['c_3'] - column vector of length 10
       PARAMS['c_4'] - column vector of length 10
       PARAMS['c_5'] - column vector of length 10
       PARAMS['c_6'] - column vector of length 10
       PARAMS['c_7'] - column vector of length 10
       PARAMS['c_8'] - column vector of length 10
       PARAMS['c_9'] - column vector of length 10
       PARAMS['c_10'] - column vector of length 10
       PARAMS['c_11'] - column vector of length 10
       PARAMS['c_12'] - column vector of length 10
       PARAMS['c_13'] - column vector of length 10
       PARAMS['c_14'] - column vector of length 10
       PARAMS['c_15'] - column vector of length 10
       PARAMS['c_16'] - column vector of length 10
       PARAMS['c_17'] - column vector of length 10
       PARAMS['c_18'] - column vector of length 10
       PARAMS['c_19'] - column vector of length 10
       PARAMS['c_20'] - column vector of length 10
       PARAMS['c_21'] - column vector of length 10
       PARAMS['H_1'] - matrix of size [14 x 14]
       PARAMS['H_2'] - matrix of size [14 x 14]
       PARAMS['H_3'] - matrix of size [14 x 14]
       PARAMS['H_4'] - matrix of size [14 x 14]
       PARAMS['H_5'] - matrix of size [14 x 14]
       PARAMS['H_6'] - matrix of size [14 x 14]
       PARAMS['H_7'] - matrix of size [14 x 14]
       PARAMS['H_8'] - matrix of size [14 x 14]
       PARAMS['H_9'] - matrix of size [14 x 14]
       PARAMS['H_10'] - matrix of size [14 x 14]
       PARAMS['H_11'] - matrix of size [14 x 14]
       PARAMS['H_12'] - matrix of size [14 x 14]
       PARAMS['H_13'] - matrix of size [14 x 14]
       PARAMS['H_14'] - matrix of size [14 x 14]
       PARAMS['H_15'] - matrix of size [14 x 14]
       PARAMS['H_16'] - matrix of size [14 x 14]
       PARAMS['H_17'] - matrix of size [14 x 14]
       PARAMS['H_18'] - matrix of size [14 x 14]
       PARAMS['H_19'] - matrix of size [14 x 14]
       PARAMS['H_20'] - matrix of size [14 x 14]
       PARAMS['H_21'] - matrix of size [14 x 14]
       PARAMS['f_1'] - column vector of length 14
       PARAMS['f_2'] - column vector of length 14
       PARAMS['f_3'] - column vector of length 14
       PARAMS['f_4'] - column vector of length 14
       PARAMS['f_5'] - column vector of length 14
       PARAMS['f_6'] - column vector of length 14
       PARAMS['f_7'] - column vector of length 14
       PARAMS['f_8'] - column vector of length 14
       PARAMS['f_9'] - column vector of length 14
       PARAMS['f_10'] - column vector of length 14
       PARAMS['f_11'] - column vector of length 14
       PARAMS['f_12'] - column vector of length 14
       PARAMS['f_13'] - column vector of length 14
       PARAMS['f_14'] - column vector of length 14
       PARAMS['f_15'] - column vector of length 14
       PARAMS['f_16'] - column vector of length 14
       PARAMS['f_17'] - column vector of length 14
       PARAMS['f_18'] - column vector of length 14
       PARAMS['f_19'] - column vector of length 14
       PARAMS['f_20'] - column vector of length 14
       PARAMS['f_21'] - column vector of length 14
       PARAMS['C_1'] - matrix of size [10 x 14]
       PARAMS['C_2'] - matrix of size [10 x 14]
       PARAMS['C_3'] - matrix of size [10 x 14]
       PARAMS['C_4'] - matrix of size [10 x 14]
       PARAMS['C_5'] - matrix of size [10 x 14]
       PARAMS['C_6'] - matrix of size [10 x 14]
       PARAMS['C_7'] - matrix of size [10 x 14]
       PARAMS['C_8'] - matrix of size [10 x 14]
       PARAMS['C_9'] - matrix of size [10 x 14]
       PARAMS['C_10'] - matrix of size [10 x 14]
       PARAMS['C_11'] - matrix of size [10 x 14]
       PARAMS['C_12'] - matrix of size [10 x 14]
       PARAMS['C_13'] - matrix of size [10 x 14]
       PARAMS['C_14'] - matrix of size [10 x 14]
       PARAMS['C_15'] - matrix of size [10 x 14]
       PARAMS['C_16'] - matrix of size [10 x 14]
       PARAMS['C_17'] - matrix of size [10 x 14]
       PARAMS['C_18'] - matrix of size [10 x 14]
       PARAMS['C_19'] - matrix of size [10 x 14]
       PARAMS['C_20'] - matrix of size [10 x 14]
       PARAMS['A_2'] - matrix of size [2 x 14]
       PARAMS['A_3'] - matrix of size [2 x 14]
       PARAMS['A_4'] - matrix of size [2 x 14]
       PARAMS['A_5'] - matrix of size [2 x 14]
       PARAMS['A_6'] - matrix of size [2 x 14]
       PARAMS['A_7'] - matrix of size [2 x 14]
       PARAMS['A_8'] - matrix of size [2 x 14]
       PARAMS['A_9'] - matrix of size [2 x 14]
       PARAMS['A_10'] - matrix of size [2 x 14]
       PARAMS['A_11'] - matrix of size [2 x 14]
       PARAMS['A_12'] - matrix of size [2 x 14]
       PARAMS['A_13'] - matrix of size [2 x 14]
       PARAMS['A_14'] - matrix of size [2 x 14]
       PARAMS['A_15'] - matrix of size [2 x 14]
       PARAMS['A_16'] - matrix of size [2 x 14]
       PARAMS['A_17'] - matrix of size [2 x 14]
       PARAMS['A_18'] - matrix of size [2 x 14]
       PARAMS['A_19'] - matrix of size [2 x 14]
       PARAMS['A_20'] - matrix of size [2 x 14]
       PARAMS['A_21'] - matrix of size [2 x 14]
       PARAMS['b_2'] - column vector of length 2
       PARAMS['b_3'] - column vector of length 2
       PARAMS['b_4'] - column vector of length 2
       PARAMS['b_5'] - column vector of length 2
       PARAMS['b_6'] - column vector of length 2
       PARAMS['b_7'] - column vector of length 2
       PARAMS['b_8'] - column vector of length 2
       PARAMS['b_9'] - column vector of length 2
       PARAMS['b_10'] - column vector of length 2
       PARAMS['b_11'] - column vector of length 2
       PARAMS['b_12'] - column vector of length 2
       PARAMS['b_13'] - column vector of length 2
       PARAMS['b_14'] - column vector of length 2
       PARAMS['b_15'] - column vector of length 2
       PARAMS['b_16'] - column vector of length 2
       PARAMS['b_17'] - column vector of length 2
       PARAMS['b_18'] - column vector of length 2
       PARAMS['b_19'] - column vector of length 2
       PARAMS['b_20'] - column vector of length 2
       PARAMS['b_21'] - column vector of length 2

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['X'] - column vector of size 252

   [OUTPUT, EXITFLAG] = MPCC_solv_20N_no_warm_no_hard_invitedguest_py.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = MPCC_solv_20N_no_warm_no_hard_invitedguest_py.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.gradient_lag_norm - infinity norm of gradient of Lagrangian
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

    '''
    global _lib

    # convert parameters
    params_py = MPCC_solv_20N_no_warm_no_hard_invitedguest_params_ctypes()
    for par in params_arg:
        try:
            #setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='A')))
            if isinstance(getattr(params_py, par), ctypes.Array):
                params_arg[par] = np.require(params_arg[par], dtype=MPCC_solv_20N_no_warm_no_hard_invitedguest_params_types[par], requirements='F')
                setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='F')))
            else:
                setattr(params_py, par, params_arg[par])
        except:
            raise ValueError('Parameter ' + par + ' does not have the appropriate dimensions or data type. Please use numpy arrays for parameters.')
    
    outputs_py = MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs_ctypes()
    info_py = MPCC_solv_20N_no_warm_no_hard_invitedguest_info()
    if sys.version_info.major == 2:
        if sys.platform.startswith('win'):
            fp = None # if set to none, the solver prints to stdout by default - necessary because we have an access violation otherwise under windows
        else:
            #fp = open('stdout_temp.txt','w')
            fp = sys.stdout
        try:
            PyFile_AsFile.restype = ctypes.POINTER(FILE)
            exitflag = _lib.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), PyFile_AsFile(fp)  )
            #fp = open('stdout_temp.txt','r')
            #print (fp.read())
            #fp.close()
        except:
            #print 'Problem with solver'
            raise
    elif sys.version_info.major == 3:
        if sys.platform.startswith('win'):
            libc = ctypes.cdll.msvcrt
        elif sys.platform.startswith('darwin'):
            libc = ctypes.CDLL('libc.dylib')
        else:
            libc = ctypes.CDLL('libc.so.6')       # Open libc
        cfopen = getattr(libc,'fopen')        # Get its fopen
        cfopen.restype = ctypes.POINTER(FILE) # Yes, fopen gives a file pointer
        cfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p] # Yes, fopen gives a file pointer 
        fp = cfopen('stdout_temp.txt'.encode('utf-8'),'w'.encode('utf-8'))    # Use that fopen 

        try:
            if sys.platform.startswith('win'):
                exitflag = _lib.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), None )
            else:
                exitflag = _lib.MPCC_solv_20N_no_warm_no_hard_invitedguest_solve( ctypes.byref(params_py), ctypes.byref(outputs_py), ctypes.byref(info_py), fp )
            libc.fclose(fp)
            fptemp = open('stdout_temp.txt','r')
            print (fptemp.read())
            fptemp.close()            
        except:
            #print 'Problem with solver'
            raise

    # convert outputs
    for out in MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs:
        MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs[out] = npct.as_array(getattr(outputs_py,out))

    return MPCC_solv_20N_no_warm_no_hard_invitedguest_outputs,int(exitflag),info_py

solve = MPCC_solv_20N_no_warm_no_hard_invitedguest_solve


